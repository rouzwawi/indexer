====================================================================
== Terminology ==

# Column
Indexing is done on the scope of columns, so everything discussed is within the scope of
one column of data and all the values that column contains.

# Bitmap
A bitmap is a full index on one column. It covers all distinct values of that colum. The
bitmap consist of a linked list of of index pages and a heap of data pages.

# Bitmap index page
An index page of the bitmap is a lookup table from column values to index data pages for
the corresponding value.

# Bitmap data page
A data page contains pure WAH encoded bitmap data.


====================================================================
== Data file page definitions ==
=== Size definitions ===
ps = 4KiB # page size
ds = 8MiB, 16MiB, 32MiB, 64MiB, 128MiB, 256MiB, 512MiB, 1024MiB... # data file size
pd = mmf::file_size(file) / PAGE_SIZE # pages per datafile

Field sizes are expressed in number of size units (u), which is one byte.
u4 = 4 bytes = 32 bit unsigned integer type
u8 = 8 bytes = 64 bit unsigned integer type
u4[16] = array of sixteen u4's


=== Page type descriptors ===
==== fs_hash_table ====
	u4				0x72786469			# magic word 'idxr'
	u4				parent_table		# page address of parent table
	u4[14]			reserved			# empty for future header use
	u4[8][113]		hash_table			# hash_table entries
	u4[104]			reserved			# waste

	4*(1 + 1 + 14 + 8*113 + 104) == 4KiB

	expl:
		First page of a data file with file system is always the 0th hash_table page.
		Hash table pages contain mappings from filenames to page adresses of the first file page.
		Each table entry contains a sha1 hash, some flags, a page address and a 'next' pointer.
		The 'next' pointers point to another fs_hash_table page, used for collisions.
		See 'struct hash_entry' in fs.hpp

==== scope_page ====
	u4				0x706f6373			# magic word 'scop'
	u8				counter

==== bitmap_data_page ====
	u4				0x706d7462			# magic word 'btmp'
	u4				last_page			# last page of bitmap (only on first page of bitmap)
	u4				next_page			# 
	u4				written_words		# words written in this page
	u4				cw_offset			# written bits in current word
	u4[--]			reserved			# empty for future header use
	u8[504]			data				# bitmap data in WAH code

	4*(1 + 1 + 1 + 13) + 8*504 == 4KiB

	expl:
		blaoblao







